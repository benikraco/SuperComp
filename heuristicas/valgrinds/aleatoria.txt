--------------------------------------------------------------------------------
-- User-annotated source: aleatoria.cpp
--------------------------------------------------------------------------------
Ir    

-- line 12 ----------------------------------------
    .  };
    .  
    .  // Function prototypes
    .  bool compareMovies(const Movie &a, const Movie &b);
    .  bool timeOverlap(int start1, int end1, int start2, int end2);
    .  std::vector<Movie> readMovies(std::string filename, int &N, int &M, std::vector<int> &maxMoviesPerCategory);
    .  
    .  // Compare function for sorting movies by end time, and start time in case of a tie
  676  bool compareMovies(const Movie &a, const Movie &b) {
2,358      if (a.end == b.end) {
  471          return a.start < b.start;
    .      }
1,382      return a.end < b.end;
1,352  }
    .  
    .  
    .  // Function to check if two time intervals overlap
    .  bool timeOverlap(int start1, int end1, int start2, int end2) {
3,815      if (!((start1 >= end2) || (end1 <= start2))) {
    .          return true;
    .      }
    .      else {
    .          return false;
    .      }
    .  }
    .  
    .      
    .  
    .  // Function to read movies from input file and return a vector of Movie structures
   16  std::vector<Movie> readMovies(std::string filename, int &N, int &M, std::vector<int> &maxMoviesPerCategory) {
    .      std::ifstream inputFile(filename);
    .  
    .      // Read the number of movies and categories from the input file
    6      inputFile >> N >> M;
6,569  => ???:0x000000000010a350 (2x)
    .  
    .      // Resize the maxMoviesPerCategory vector according to the number of categories
    2      maxMoviesPerCategory.resize(M);
    .  
    .      // Read the maximum number of movies per category
   34      for (int i = 0; i < M; i++) {
   20          inputFile >> maxMoviesPerCategory[i];
4,104  => ???:0x000000000010a350 (10x)
    .      }
    .  
    .      // Initialize the movies vector with the number of movies
    1      std::vector<Movie> movies(N);
    .  
    .      // Read the movie information
  295      for (int i = 0; i < N; i++) {
  900          inputFile >> movies[i].start >> movies[i].end >> movies[i].category;
128,446  => ???:0x000000000010a350 (300x)
  400          if (movies[i].end < movies[i].start) {
   20              movies[i].end += 24;
    .          }
  110          movies[i].index = i; // Set the index of the movie
    .      }
    .  
    .      // Close the input file
    .      inputFile.close();
    .      return movies;
   12  }
    .  
   16  int main(int argc, char* argv[]) {
    2      if (argc != 2) {
    .          std::cerr << "Usage: " << argv[0] << " <input_file>" << std::endl;
    .          return 1;
    .      }
    .  
    1      std::string input_file = argv[1];
    .      int N, M;
    .      std::vector<int> maxMoviesPerCategory;
    .  
    .      // Passe o nome do arquivo de input para a função readMovies
    6      std::vector<Movie> movies = readMovies(input_file, N, M, maxMoviesPerCategory);
161,501  => aleatoria.cpp:readMovies(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&, int&, std::vector<int, std::allocator<int> >&) (1x)
    .      
    .  
    .      // Sort the movies by end time, and start time in case of a tie
    .      std::sort(movies.begin(), movies.end(), compareMovies);
    .  
    .      // Initialize the chosenMoviesPerCategory vector
    1      std::vector<int> chosenMoviesPerCategory(M, 0);
    .      std::vector<Movie> chosenMovies;
    1      int moviesWatched = 0;
    .  
    .      // Initialize a vector to track which movies have been selected
    3      std::vector<bool> movieSelected(N, false);
    .  
    .      // Initialize the random number generator
    4      std::random_device rd;
2,891  => /usr/include/c++/9/bits/random.h:std::random_device::random_device() (1x)
    1      std::mt19937 gen(rd());
    .      std::uniform_real_distribution<double> distribution(0.0, 1.0);
    2      gen.seed(rd() + time(0));
    8  => ???:0x000000000010a3b0 (1x)
    .  
    .      // Start the timer
    2      auto startTime = std::chrono::steady_clock::now();
  950  => ???:0x000000000010a450 (1x)
    .  
    .      // Iterate over the sorted movies
  302      for (const Movie &movie : movies) {
    .  
    .          double randomValue = distribution(gen);
  300          if (randomValue <= 0.25) {
    .  
    .              // Make another alearization to find an alternative movie
   63              std::uniform_int_distribution<int> distribution2(movie.index, N - 1);
   40              bool conflict2 = false;
    .                  
    .              int randomValue2 = distribution2(gen);
    .  
  105              if (movies[randomValue2].start == movies[randomValue2].end) {
    .                  continue;
    .              }
    .  
  539              for (auto& chosen_movie: chosenMovies){
    .                  // verify if movies is valid to be selected compared to movie
  455                  if (!(!(timeOverlap(movies[randomValue2].start, movies[randomValue2].end, chosen_movie.start, chosen_movie.end)) && (chosenMoviesPerCategory[movies[randomValue2].category - 1] < maxMoviesPerCategory[movies[randomValue2].category - 1]))){
  468                      conflict2=true; 
    .                  }
    .              }
    .  
   40              if (!conflict2){
   16                  chosenMoviesPerCategory[movies[randomValue2].category - 1]++;
    4                  moviesWatched++;
    8                  chosenMovies.push_back(movies[randomValue2]);
  709  => /usr/include/c++/9/bits/stl_vector.h:std::vector<Movie, std::allocator<Movie> >::push_back(Movie const&) (4x)
    .                  movieSelected[randomValue2] = true; // Mark the alternative movie as selected 
    .              } else{
    .                  // std::cout << "No alternative movie found" << std::endl;
    .              }
    .          }
    .  
  400          if (movie.start == movie.end) {
    .              continue;
    .          }
    .  
    .          // Check if the movie doesn't cross the day boundary and there are available slots for the movie category
1,368          if (!movieSelected[movie.index] && movie.end > movie.start && (chosenMoviesPerCategory[movie.category - 1] < maxMoviesPerCategory[movie.category - 1])) {
  172              bool conflict = false;
    .  
    .              // Check for conflicts with other chosen movies
2,218              for (const Movie &chosenMovie : chosenMovies) {
    .                  if (timeOverlap(chosenMovie.start, chosenMovie.end, movie.start, movie.end)) {
1,364                      conflict = true;
    .                  }
    .              }
    .  
    .              // Check for conflicts with other chosen movies
    .  
  172              if (!conflict) {
   16                  chosenMoviesPerCategory[movie.category - 1]++;
    8                  moviesWatched++;
   24                  chosenMovies.push_back(movie);
1,266  => /usr/include/c++/9/bits/stl_vector.h:std::vector<Movie, std::allocator<Movie> >::push_back(Movie const&) (8x)
   16                  movieSelected[movie.index] = true; // Mark the alternative movie as selected
    .              } else {
    .                  // std::cout << "No alternative movie found 2" << std::endl;
    .              }
    .      
    .          }
    .      }    
    .  
    .      // Stop the timer
    1      auto endTime = std::chrono::steady_clock::now();
   40  => ???:0x000000000010a450 (1x)
    .  
    .      // Calculate the time elapsed during algorithm execution
    3      double duration = std::chrono::duration_cast<std::chrono::microseconds>(endTime - startTime).count();
    .  
    .      // Sort the chosenMovies vector by end time, and start time in case of a tie
    .      // std::sort(chosenMovies.begin(), chosenMovies.end(), compareMovies);
    .  
    .      // Print the number of movies watched
    4      std::cout << "Movies watched: " << moviesWatched << std::endl;
4,669  => ???:0x000000000010a500 (1x)
    .  
    .      // Print the start and end times, and category of the selected movies
   40      for (const Movie &movie : chosenMovies) {
  144          std::cout << "Movie start: " << movie.start << ", end: " << movie.end << ", category: " << movie.category << std::endl;
14,943  => ???:0x000000000010a500 (36x)
    .      }
    .  
    .      // Print the time elapsed during the aleatory algorithm execution
    .      std::cout << "Time elapsed during the aleatory algorithm: " << duration << " microseconds" << std::endl;
   16  }
--------------------------------------------------------------------------------
Ir     
--------------------------------------------------------------------------------
20,215  events annotated